// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCES:
 *     NetDevice.avsc
 *     User.avsc
 *     campaign_finance.avsc
 *     clickstream.avsc
 *     clickstream_codes.avsc
 *     clickstream_users.avsc
 *     credit_cards.avsc
 *     device_information.avsc
 *     fleet_mgmt_description.avsc
 *     fleet_mgmt_location.avsc
 *     fleet_mgmt_sensors.avsc
 *     gaming_games.avsc
 *     gaming_player_activity.avsc
 *     gaming_players.avsc
 *     insurance_customer_activity.avsc
 *     insurance_customers.avsc
 *     insurance_offers.avsc
 *     inventory.avsc
 *     map_dumb_schema.avsc
 *     orders.avsc
 *     pageviews.avsc
 *     payroll_bonus.avsc
 *     payroll_employee.avsc
 *     payroll_employee_location.avsc
 *     pizza_orders.avsc
 *     pizza_orders_cancelled.avsc
 *     pizza_orders_completed.avsc
 *     product.avsc
 *     purchase.avsc
 *     ratings.avsc
 *     shoe.avsc
 *     shoe_clickstream.avsc
 *     shoe_customers.avsc
 *     shoe_orders.avsc
 *     siem_logs.avsc
 *     stockTrades.avsc
 *     stores.avsc
 *     syslog_logs.avsc
 *     transactions.avsc
 *     users.avsc
 */
package types

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Gaminggames struct {
	Id int32 `json:"id"`

	Room_name string `json:"room_name"`

	Created_date int64 `json:"created_date"`
}

const GaminggamesAvroCRC64Fingerprint = "\x9e∆Ø\xdf\xf2\xcf\xfev"

func NewGaminggames() Gaminggames {
	r := Gaminggames{}
	return r
}

func DeserializeGaminggames(r io.Reader) (Gaminggames, error) {
	t := NewGaminggames()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeGaminggamesFromSchema(r io.Reader, schema string) (Gaminggames, error) {
	t := NewGaminggames()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeGaminggames(r Gaminggames, w io.Writer) error {
	var err error
	err = vm.WriteInt(r.Id, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Room_name, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.Created_date, w)
	if err != nil {
		return err
	}
	return err
}

func (r Gaminggames) Serialize(w io.Writer) error {
	return writeGaminggames(r, w)
}

func (r Gaminggames) Schema() string {
	return "{\"fields\":[{\"name\":\"id\",\"type\":{\"arg.properties\":{\"range\":{\"max\":5000,\"min\":1000}},\"type\":\"int\"}},{\"name\":\"room_name\",\"type\":{\"arg.properties\":{\"options\":[\"Arcade -- Rookie\",\"Arcade -- Skilled\",\"Arcade -- Expert\",\"Survival -- Rookie\",\"Survival -- Skilled\",\"Survival -- Expert\",\"Classic -- Rookie\",\"Classic -- Skilled\",\"Classic -- Expert\"]},\"type\":\"string\"}},{\"name\":\"created_date\",\"type\":{\"arg.properties\":{\"iteration\":{\"start\":1609459200000,\"step\":100000}},\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}}],\"name\":\"gaming.gaminggames\",\"type\":\"record\"}"
}

func (r Gaminggames) SchemaName() string {
	return "gaming.gaminggames"
}

func (_ Gaminggames) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Gaminggames) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Gaminggames) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Gaminggames) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Gaminggames) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Gaminggames) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Gaminggames) SetString(v string)   { panic("Unsupported operation") }
func (_ Gaminggames) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Gaminggames) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.Int{Target: &r.Id}

		return w

	case 1:
		w := types.String{Target: &r.Room_name}

		return w

	case 2:
		w := types.Long{Target: &r.Created_date}

		return w

	}
	panic("Unknown field index")
}

func (r *Gaminggames) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Gaminggames) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ Gaminggames) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Gaminggames) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Gaminggames) HintSize(int)                     { panic("Unsupported operation") }
func (_ Gaminggames) Finalize()                        {}

func (_ Gaminggames) AvroCRC64Fingerprint() []byte {
	return []byte(GaminggamesAvroCRC64Fingerprint)
}

func (r Gaminggames) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["room_name"], err = json.Marshal(r.Room_name)
	if err != nil {
		return nil, err
	}
	output["created_date"], err = json.Marshal(r.Created_date)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Gaminggames) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for id")
	}
	val = func() json.RawMessage {
		if v, ok := fields["room_name"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Room_name); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for room_name")
	}
	val = func() json.RawMessage {
		if v, ok := fields["created_date"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Created_date); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for created_date")
	}
	return nil
}
