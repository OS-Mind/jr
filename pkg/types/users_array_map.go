// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCES:
 *     csv_product.avsc
 *     csv_user.avsc
 *     finance_stock_trade.avsc
 *     fleetmgmt_description.avsc
 *     fleetmgmt_location.avsc
 *     fleetmgmt_sensor.avsc
 *     gaming_game.avsc
 *     gaming_player.avsc
 *     gaming_player_activity.avsc
 *     genericstore_purchase.avsc
 *     insurance_customer.avsc
 *     insurance_customer_activity.avsc
 *     insurance_offer.avsc
 *     inventorymgmt_inventory.avsc
 *     inventorymgmt_product.avsc
 *     iot_device_information.avsc
 *     map_dumb_schema.avsc
 *     marketing_campaign_finance.avsc
 *     net_device.avsc
 *     payment_credit_card.avsc
 *     payment_transaction.avsc
 *     payroll_bonus.avsc
 *     payroll_employee.avsc
 *     payroll_employee_location.avsc
 *     pizzastore_order.avsc
 *     pizzastore_order_cancelled.avsc
 *     pizzastore_order_completed.avsc
 *     shoestore_clickstream.avsc
 *     shoestore_customer.avsc
 *     shoestore_order.avsc
 *     shoestore_shoe.avsc
 *     shopping_order.avsc
 *     shopping_rating.avsc
 *     siem_log.avsc
 *     store.avsc
 *     syslog_log.avsc
 *     user.avsc
 *     users.avsc
 *     users_array_map.avsc
 *     webanalytics_clickstream.avsc
 *     webanalytics_code.avsc
 *     webanalytics_page_view.avsc
 *     webanalytics_user.avsc
 */
package types

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type UsersArrayMap struct {
	Registertime int64 `json:"registertime"`

	Userid string `json:"userid"`

	Regionid string `json:"regionid"`

	Gender string `json:"gender"`

	Interests []string `json:"interests"`

	Contactinfo map[string]string `json:"contactinfo"`
}

const UsersArrayMapAvroCRC64Fingerprint = ">\xfa\bBZT\xc8T"

func NewUsersArrayMap() UsersArrayMap {
	r := UsersArrayMap{}
	r.Interests = make([]string, 0)

	r.Contactinfo = make(map[string]string)

	return r
}

func DeserializeUsersArrayMap(r io.Reader) (UsersArrayMap, error) {
	t := NewUsersArrayMap()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeUsersArrayMapFromSchema(r io.Reader, schema string) (UsersArrayMap, error) {
	t := NewUsersArrayMap()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeUsersArrayMap(r UsersArrayMap, w io.Writer) error {
	var err error
	err = vm.WriteLong(r.Registertime, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Userid, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Regionid, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Gender, w)
	if err != nil {
		return err
	}
	err = writeArrayString(r.Interests, w)
	if err != nil {
		return err
	}
	err = writeMapString(r.Contactinfo, w)
	if err != nil {
		return err
	}
	return err
}

func (r UsersArrayMap) Serialize(w io.Writer) error {
	return writeUsersArrayMap(r, w)
}

func (r UsersArrayMap) Schema() string {
	return "{\"fields\":[{\"name\":\"registertime\",\"type\":{\"arg.properties\":{\"range\":{\"max\":1519273364600,\"min\":1487715775521}},\"type\":\"long\"}},{\"name\":\"userid\",\"type\":{\"arg.properties\":{\"regex\":\"User_[1-9]\"},\"type\":\"string\"}},{\"name\":\"regionid\",\"type\":{\"arg.properties\":{\"regex\":\"Region_[1-9]\"},\"type\":\"string\"}},{\"name\":\"gender\",\"type\":{\"arg.properties\":{\"options\":[\"MALE\",\"FEMALE\",\"OTHER\"]},\"type\":\"string\"}},{\"name\":\"interests\",\"type\":{\"arg.properties\":{\"options\":[[\"Game\",\"News\"],[\"Game\",\"Sport\"],[\"News\",\"Movies\"],[\"News\",\"Travel\"]]},\"items\":\"string\",\"type\":\"array\"}},{\"name\":\"contactinfo\",\"type\":{\"arg.properties\":{\"options\":[{\"city\":\"San Mateo\",\"phone\":\"6503349999\",\"state\":\"CA\",\"zipcode\":\"94403\"},{\"city\":\"Irvine\",\"phone\":\"9492229999\",\"state\":\"CA\",\"zipcode\":\"92617\"},{\"city\":\"Palo Alto\",\"phone\":\"6503889999\",\"state\":\"CA\",\"zipcode\":\"94301\"},{\"city\":\"San Jose\",\"phone\":\"4083366881\",\"state\":\"CA\",\"zipcode\":\"95112\"},{\"city\":\"San Carlos\",\"phone\":\"6502215368\",\"state\":\"CA\",\"zipcode\":\"94070\"}]},\"type\":\"map\",\"values\":\"string\"}}],\"name\":\"user.UsersArrayMap\",\"type\":\"record\"}"
}

func (r UsersArrayMap) SchemaName() string {
	return "user.UsersArrayMap"
}

func (_ UsersArrayMap) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ UsersArrayMap) SetInt(v int32)       { panic("Unsupported operation") }
func (_ UsersArrayMap) SetLong(v int64)      { panic("Unsupported operation") }
func (_ UsersArrayMap) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ UsersArrayMap) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ UsersArrayMap) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ UsersArrayMap) SetString(v string)   { panic("Unsupported operation") }
func (_ UsersArrayMap) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *UsersArrayMap) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.Long{Target: &r.Registertime}

		return w

	case 1:
		w := types.String{Target: &r.Userid}

		return w

	case 2:
		w := types.String{Target: &r.Regionid}

		return w

	case 3:
		w := types.String{Target: &r.Gender}

		return w

	case 4:
		r.Interests = make([]string, 0)

		w := ArrayStringWrapper{Target: &r.Interests}

		return w

	case 5:
		r.Contactinfo = make(map[string]string)

		w := MapStringWrapper{Target: &r.Contactinfo}

		return &w

	}
	panic("Unknown field index")
}

func (r *UsersArrayMap) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *UsersArrayMap) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ UsersArrayMap) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ UsersArrayMap) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ UsersArrayMap) HintSize(int)                     { panic("Unsupported operation") }
func (_ UsersArrayMap) Finalize()                        {}

func (_ UsersArrayMap) AvroCRC64Fingerprint() []byte {
	return []byte(UsersArrayMapAvroCRC64Fingerprint)
}

func (r UsersArrayMap) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["registertime"], err = json.Marshal(r.Registertime)
	if err != nil {
		return nil, err
	}
	output["userid"], err = json.Marshal(r.Userid)
	if err != nil {
		return nil, err
	}
	output["regionid"], err = json.Marshal(r.Regionid)
	if err != nil {
		return nil, err
	}
	output["gender"], err = json.Marshal(r.Gender)
	if err != nil {
		return nil, err
	}
	output["interests"], err = json.Marshal(r.Interests)
	if err != nil {
		return nil, err
	}
	output["contactinfo"], err = json.Marshal(r.Contactinfo)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *UsersArrayMap) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["registertime"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Registertime); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for registertime")
	}
	val = func() json.RawMessage {
		if v, ok := fields["userid"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Userid); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for userid")
	}
	val = func() json.RawMessage {
		if v, ok := fields["regionid"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Regionid); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for regionid")
	}
	val = func() json.RawMessage {
		if v, ok := fields["gender"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Gender); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for gender")
	}
	val = func() json.RawMessage {
		if v, ok := fields["interests"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Interests); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for interests")
	}
	val = func() json.RawMessage {
		if v, ok := fields["contactinfo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Contactinfo); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for contactinfo")
	}
	return nil
}
