// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCES:
 *     csv_product.avsc
 *     csv_user.avsc
 *     finance_stock_trade.avsc
 *     fleetmgmt_description.avsc
 *     fleetmgmt_location.avsc
 *     fleetmgmt_sensor.avsc
 *     gaming_game.avsc
 *     gaming_player.avsc
 *     gaming_player_activity.avsc
 *     genericstore_purchase.avsc
 *     insurance_customer.avsc
 *     insurance_customer_activity.avsc
 *     insurance_offer.avsc
 *     inventorymgmt_inventory.avsc
 *     inventorymgmt_product.avsc
 *     iot_device_information.avsc
 *     map_dumb_schema.avsc
 *     marketing_campaign_finance.avsc
 *     net_device.avsc
 *     payment_credit_card.avsc
 *     payment_transaction.avsc
 *     payroll_bonus.avsc
 *     payroll_employee.avsc
 *     payroll_employee_location.avsc
 *     pizzastore_order.avsc
 *     pizzastore_order_cancelled.avsc
 *     pizzastore_order_completed.avsc
 *     shoestore_clickstream.avsc
 *     shoestore_customer.avsc
 *     shoestore_order.avsc
 *     shoestore_shoe.avsc
 *     shopping_order.avsc
 *     shopping_rating.avsc
 *     siem_log.avsc
 *     store.avsc
 *     syslog_log.avsc
 *     user.avsc
 *     users.avsc
 *     users_array_map.avsc
 *     webanalytics_clickstream.avsc
 *     webanalytics_code.avsc
 *     webanalytics_page_view.avsc
 *     webanalytics_user.avsc
 */
package types

import (
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
	"io"
)

func writeMapString(r map[string]string, w io.Writer) error {
	err := vm.WriteLong(int64(len(r)), w)
	if err != nil || len(r) == 0 {
		return err
	}
	for k, e := range r {
		err = vm.WriteString(k, w)
		if err != nil {
			return err
		}
		err = vm.WriteString(e, w)
		if err != nil {
			return err
		}
	}
	return vm.WriteLong(0, w)
}

type MapStringWrapper struct {
	Target *map[string]string
	keys   []string
	values []string
}

func (_ *MapStringWrapper) SetBoolean(v bool)     { panic("Unsupported operation") }
func (_ *MapStringWrapper) SetInt(v int32)        { panic("Unsupported operation") }
func (_ *MapStringWrapper) SetLong(v int64)       { panic("Unsupported operation") }
func (_ *MapStringWrapper) SetFloat(v float32)    { panic("Unsupported operation") }
func (_ *MapStringWrapper) SetDouble(v float64)   { panic("Unsupported operation") }
func (_ *MapStringWrapper) SetBytes(v []byte)     { panic("Unsupported operation") }
func (_ *MapStringWrapper) SetString(v string)    { panic("Unsupported operation") }
func (_ *MapStringWrapper) SetUnionElem(v int64)  { panic("Unsupported operation") }
func (_ *MapStringWrapper) Get(i int) types.Field { panic("Unsupported operation") }
func (_ *MapStringWrapper) SetDefault(i int)      { panic("Unsupported operation") }

func (r *MapStringWrapper) HintSize(s int) {
	if r.keys == nil {
		r.keys = make([]string, 0, s)
		r.values = make([]string, 0, s)
	}
}

func (r *MapStringWrapper) NullField(_ int) {
	panic("Unsupported operation")
}

func (r *MapStringWrapper) Finalize() {
	for i := range r.keys {
		(*r.Target)[r.keys[i]] = r.values[i]
	}
}

func (r *MapStringWrapper) AppendMap(key string) types.Field {
	r.keys = append(r.keys, key)
	var v string
	r.values = append(r.values, v)
	return &types.String{Target: &r.values[len(r.values)-1]}
}

func (_ *MapStringWrapper) AppendArray() types.Field { panic("Unsupported operation") }
