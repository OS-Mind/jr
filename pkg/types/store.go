// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCES:
 *     csv_product.avsc
 *     csv_user.avsc
 *     finance_stock_trade.avsc
 *     fleetmgmt_description.avsc
 *     fleetmgmt_location.avsc
 *     fleetmgmt_sensor.avsc
 *     gaming_game.avsc
 *     gaming_player.avsc
 *     gaming_player_activity.avsc
 *     genericstore_purchase.avsc
 *     insurance_customer.avsc
 *     insurance_customer_activity.avsc
 *     insurance_offer.avsc
 *     inventorymgmt_inventory.avsc
 *     inventorymgmt_product.avsc
 *     iot_device_information.avsc
 *     map_dumb_schema.avsc
 *     marketing_campaign_finance.avsc
 *     net_device.avsc
 *     payment_credit_card.avsc
 *     payment_transaction.avsc
 *     payroll_bonus.avsc
 *     payroll_employee.avsc
 *     payroll_employee_location.avsc
 *     pizzastore_order.avsc
 *     pizzastore_order_cancelled.avsc
 *     pizzastore_order_completed.avsc
 *     shoestore_clickstream.avsc
 *     shoestore_customer.avsc
 *     shoestore_order.avsc
 *     shoestore_shoe.avsc
 *     shopping_order.avsc
 *     shopping_rating.avsc
 *     siem_log.avsc
 *     store.avsc
 *     syslog_log.avsc
 *     user.avsc
 *     users.avsc
 *     users_array_map.avsc
 *     webanalytics_clickstream.avsc
 *     webanalytics_code.avsc
 *     webanalytics_page_view.avsc
 *     webanalytics_user.avsc
 */
package types

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Store struct {
	Store_id int32 `json:"store_id"`

	City string `json:"city"`

	State string `json:"state"`
}

const StoreAvroCRC64Fingerprint = "@\xb0\xdd\x02\xa49%;"

func NewStore() Store {
	r := Store{}
	return r
}

func DeserializeStore(r io.Reader) (Store, error) {
	t := NewStore()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeStoreFromSchema(r io.Reader, schema string) (Store, error) {
	t := NewStore()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeStore(r Store, w io.Writer) error {
	var err error
	err = vm.WriteInt(r.Store_id, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.City, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.State, w)
	if err != nil {
		return err
	}
	return err
}

func (r Store) Serialize(w io.Writer) error {
	return writeStore(r, w)
}

func (r Store) Schema() string {
	return "{\"arg.properties\":{\"options\":[{\"city\":\"Raleigh\",\"state\":\"NC\",\"store_id\":1},{\"city\":\"Chicago\",\"state\":\"IL\",\"store_id\":2},{\"city\":\"Sacramento\",\"state\":\"CA\",\"store_id\":3},{\"city\":\"Austin\",\"state\":\"TX\",\"store_id\":4},{\"city\":\"Boston\",\"state\":\"MA\",\"store_id\":5},{\"city\":\"Atlanta\",\"state\":\"GA\",\"store_id\":6},{\"city\":\"Lexington\",\"state\":\"SC\",\"store_id\":7}]},\"fields\":[{\"name\":\"store_id\",\"type\":\"int\"},{\"name\":\"city\",\"type\":\"string\"},{\"name\":\"state\",\"type\":\"string\"}],\"name\":\"store.store\",\"type\":\"record\"}"
}

func (r Store) SchemaName() string {
	return "store.store"
}

func (_ Store) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Store) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Store) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Store) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Store) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Store) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Store) SetString(v string)   { panic("Unsupported operation") }
func (_ Store) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Store) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.Int{Target: &r.Store_id}

		return w

	case 1:
		w := types.String{Target: &r.City}

		return w

	case 2:
		w := types.String{Target: &r.State}

		return w

	}
	panic("Unknown field index")
}

func (r *Store) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Store) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ Store) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Store) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Store) HintSize(int)                     { panic("Unsupported operation") }
func (_ Store) Finalize()                        {}

func (_ Store) AvroCRC64Fingerprint() []byte {
	return []byte(StoreAvroCRC64Fingerprint)
}

func (r Store) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["store_id"], err = json.Marshal(r.Store_id)
	if err != nil {
		return nil, err
	}
	output["city"], err = json.Marshal(r.City)
	if err != nil {
		return nil, err
	}
	output["state"], err = json.Marshal(r.State)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Store) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["store_id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Store_id); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for store_id")
	}
	val = func() json.RawMessage {
		if v, ok := fields["city"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.City); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for city")
	}
	val = func() json.RawMessage {
		if v, ok := fields["state"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.State); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for state")
	}
	return nil
}
