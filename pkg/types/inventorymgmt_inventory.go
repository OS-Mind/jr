// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCES:
 *     csv_product.avsc
 *     csv_user.avsc
 *     finance_stock_trade.avsc
 *     fleetmgmt_description.avsc
 *     fleetmgmt_location.avsc
 *     fleetmgmt_sensor.avsc
 *     gaming_game.avsc
 *     gaming_player.avsc
 *     gaming_player_activity.avsc
 *     genericstore_purchase.avsc
 *     insurance_customer.avsc
 *     insurance_customer_activity.avsc
 *     insurance_offer.avsc
 *     inventorymgmt_inventory.avsc
 *     inventorymgmt_product.avsc
 *     iot_device_information.avsc
 *     map_dumb_schema.avsc
 *     marketing_campaign_finance.avsc
 *     net_device.avsc
 *     payment_credit_card.avsc
 *     payment_transaction.avsc
 *     payroll_bonus.avsc
 *     payroll_employee.avsc
 *     payroll_employee_location.avsc
 *     pizzastore_order.avsc
 *     pizzastore_order_cancelled.avsc
 *     pizzastore_order_completed.avsc
 *     shoestore_clickstream.avsc
 *     shoestore_customer.avsc
 *     shoestore_order.avsc
 *     shoestore_shoe.avsc
 *     shopping_order.avsc
 *     shopping_rating.avsc
 *     siem_log.avsc
 *     store.avsc
 *     syslog_log.avsc
 *     user.avsc
 *     users.avsc
 *     users_array_map.avsc
 *     webanalytics_clickstream.avsc
 *     webanalytics_code.avsc
 *     webanalytics_page_view.avsc
 *     webanalytics_user.avsc
 */
package types

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type InventorymgmtInventory struct {
	Id int64 `json:"id"`

	Quantity int64 `json:"quantity"`

	Productid int64 `json:"productid"`
}

const InventorymgmtInventoryAvroCRC64Fingerprint = "\xec:1\xff\x80\xa7Ìœ"

func NewInventorymgmtInventory() InventorymgmtInventory {
	r := InventorymgmtInventory{}
	return r
}

func DeserializeInventorymgmtInventory(r io.Reader) (InventorymgmtInventory, error) {
	t := NewInventorymgmtInventory()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeInventorymgmtInventoryFromSchema(r io.Reader, schema string) (InventorymgmtInventory, error) {
	t := NewInventorymgmtInventory()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeInventorymgmtInventory(r InventorymgmtInventory, w io.Writer) error {
	var err error
	err = vm.WriteLong(r.Id, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.Quantity, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.Productid, w)
	if err != nil {
		return err
	}
	return err
}

func (r InventorymgmtInventory) Serialize(w io.Writer) error {
	return writeInventorymgmtInventory(r, w)
}

func (r InventorymgmtInventory) Schema() string {
	return "{\"fields\":[{\"name\":\"id\",\"type\":{\"arg.properties\":{\"iteration\":{\"start\":0}},\"type\":\"long\"}},{\"name\":\"quantity\",\"type\":{\"arg.properties\":{\"iteration\":{\"start\":0}},\"type\":\"long\"}},{\"name\":\"productid\",\"type\":{\"arg.properties\":{\"iteration\":{\"start\":0}},\"type\":\"long\"}}],\"name\":\"inventorymgmt.InventorymgmtInventory\",\"type\":\"record\"}"
}

func (r InventorymgmtInventory) SchemaName() string {
	return "inventorymgmt.InventorymgmtInventory"
}

func (_ InventorymgmtInventory) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ InventorymgmtInventory) SetInt(v int32)       { panic("Unsupported operation") }
func (_ InventorymgmtInventory) SetLong(v int64)      { panic("Unsupported operation") }
func (_ InventorymgmtInventory) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ InventorymgmtInventory) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ InventorymgmtInventory) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ InventorymgmtInventory) SetString(v string)   { panic("Unsupported operation") }
func (_ InventorymgmtInventory) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *InventorymgmtInventory) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.Long{Target: &r.Id}

		return w

	case 1:
		w := types.Long{Target: &r.Quantity}

		return w

	case 2:
		w := types.Long{Target: &r.Productid}

		return w

	}
	panic("Unknown field index")
}

func (r *InventorymgmtInventory) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *InventorymgmtInventory) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ InventorymgmtInventory) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ InventorymgmtInventory) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ InventorymgmtInventory) HintSize(int)                     { panic("Unsupported operation") }
func (_ InventorymgmtInventory) Finalize()                        {}

func (_ InventorymgmtInventory) AvroCRC64Fingerprint() []byte {
	return []byte(InventorymgmtInventoryAvroCRC64Fingerprint)
}

func (r InventorymgmtInventory) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["quantity"], err = json.Marshal(r.Quantity)
	if err != nil {
		return nil, err
	}
	output["productid"], err = json.Marshal(r.Productid)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *InventorymgmtInventory) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for id")
	}
	val = func() json.RawMessage {
		if v, ok := fields["quantity"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Quantity); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for quantity")
	}
	val = func() json.RawMessage {
		if v, ok := fields["productid"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Productid); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for productid")
	}
	return nil
}
