// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCES:
 *     campaign_finance.avsc
 *     click_stream.avsc
 *     click_stream_codes.avsc
 *     click_stream_users.avsc
 *     credit_cards.avsc
 *     csv_product.avsc
 *     csv_user.avsc
 *     device_information.avsc
 *     fleet_mgmt_description.avsc
 *     fleet_mgmt_location.avsc
 *     fleet_mgmt_sensors.avsc
 *     gaming_games.avsc
 *     gaming_player_activity.avsc
 *     gaming_players.avsc
 *     insurance_customer_activity.avsc
 *     insurance_customers.avsc
 *     insurance_offers.avsc
 *     inventory.avsc
 *     map_dumb_schema.avsc
 *     net_device.avsc
 *     orders.avsc
 *     page_views.avsc
 *     payroll_bonus.avsc
 *     payroll_employee.avsc
 *     payroll_employee_location.avsc
 *     pizza_orders.avsc
 *     pizza_orders_cancelled.avsc
 *     pizza_orders_completed.avsc
 *     product.avsc
 *     purchase.avsc
 *     ratings.avsc
 *     shoe.avsc
 *     shoe_clickstream.avsc
 *     shoe_customer.avsc
 *     shoe_order.avsc
 *     siem_logs.avsc
 *     stock_trades.avsc
 *     stores.avsc
 *     syslog_logs.avsc
 *     transactions.avsc
 *     user.avsc
 *     users.avsc
 *     users_array_map.avsc
 */
package types

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type CsvProduct struct {
	Product_id string `json:"product_id"`

	Name string `json:"name"`

	Brand string `json:"brand"`

	Page_url string `json:"page_url"`
}

const CsvProductAvroCRC64Fingerprint = "\x9eU\xf1\x89>C!;"

func NewCsvProduct() CsvProduct {
	r := CsvProduct{}
	return r
}

func DeserializeCsvProduct(r io.Reader) (CsvProduct, error) {
	t := NewCsvProduct()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeCsvProductFromSchema(r io.Reader, schema string) (CsvProduct, error) {
	t := NewCsvProduct()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeCsvProduct(r CsvProduct, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Product_id, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Name, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Brand, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Page_url, w)
	if err != nil {
		return err
	}
	return err
}

func (r CsvProduct) Serialize(w io.Writer) error {
	return writeCsvProduct(r, w)
}

func (r CsvProduct) Schema() string {
	return "{\"fields\":[{\"name\":\"product_id\",\"type\":{\"type\":\"string\"}},{\"name\":\"name\",\"type\":{\"type\":\"string\"}},{\"name\":\"brand\",\"type\":{\"type\":\"string\"}},{\"name\":\"page_url\",\"type\":{\"type\":\"string\"}}],\"name\":\"clickstream.CsvProduct\",\"type\":\"record\"}"
}

func (r CsvProduct) SchemaName() string {
	return "clickstream.CsvProduct"
}

func (_ CsvProduct) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ CsvProduct) SetInt(v int32)       { panic("Unsupported operation") }
func (_ CsvProduct) SetLong(v int64)      { panic("Unsupported operation") }
func (_ CsvProduct) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ CsvProduct) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ CsvProduct) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ CsvProduct) SetString(v string)   { panic("Unsupported operation") }
func (_ CsvProduct) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *CsvProduct) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Product_id}

		return w

	case 1:
		w := types.String{Target: &r.Name}

		return w

	case 2:
		w := types.String{Target: &r.Brand}

		return w

	case 3:
		w := types.String{Target: &r.Page_url}

		return w

	}
	panic("Unknown field index")
}

func (r *CsvProduct) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *CsvProduct) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ CsvProduct) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ CsvProduct) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ CsvProduct) HintSize(int)                     { panic("Unsupported operation") }
func (_ CsvProduct) Finalize()                        {}

func (_ CsvProduct) AvroCRC64Fingerprint() []byte {
	return []byte(CsvProductAvroCRC64Fingerprint)
}

func (r CsvProduct) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["product_id"], err = json.Marshal(r.Product_id)
	if err != nil {
		return nil, err
	}
	output["name"], err = json.Marshal(r.Name)
	if err != nil {
		return nil, err
	}
	output["brand"], err = json.Marshal(r.Brand)
	if err != nil {
		return nil, err
	}
	output["page_url"], err = json.Marshal(r.Page_url)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *CsvProduct) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["product_id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Product_id); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for product_id")
	}
	val = func() json.RawMessage {
		if v, ok := fields["name"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Name); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for name")
	}
	val = func() json.RawMessage {
		if v, ok := fields["brand"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Brand); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for brand")
	}
	val = func() json.RawMessage {
		if v, ok := fields["page_url"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Page_url); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for page_url")
	}
	return nil
}
