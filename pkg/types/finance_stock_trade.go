// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCES:
 *     csv_product.avsc
 *     csv_user.avsc
 *     finance_stock_trade.avsc
 *     fleetmgmt_description.avsc
 *     fleetmgmt_location.avsc
 *     fleetmgmt_sensor.avsc
 *     gaming_game.avsc
 *     gaming_player.avsc
 *     gaming_player_activity.avsc
 *     genericstore_purchase.avsc
 *     insurance_customer.avsc
 *     insurance_customer_activity.avsc
 *     insurance_offer.avsc
 *     inventorymgmt_inventory.avsc
 *     inventorymgmt_product.avsc
 *     iot_device_information.avsc
 *     map_dumb_schema.avsc
 *     marketing_campaign_finance.avsc
 *     net_device.avsc
 *     payment_credit_card.avsc
 *     payment_transaction.avsc
 *     payroll_bonus.avsc
 *     payroll_employee.avsc
 *     payroll_employee_location.avsc
 *     pizzastore_order.avsc
 *     pizzastore_order_cancelled.avsc
 *     pizzastore_order_completed.avsc
 *     shoestore_clickstream.avsc
 *     shoestore_customer.avsc
 *     shoestore_order.avsc
 *     shoestore_shoe.avsc
 *     shopping_order.avsc
 *     shopping_rating.avsc
 *     siem_log.avsc
 *     store.avsc
 *     syslog_log.avsc
 *     user.avsc
 *     users.avsc
 *     users_array_map.avsc
 *     webanalytics_clickstream.avsc
 *     webanalytics_code.avsc
 *     webanalytics_page_view.avsc
 *     webanalytics_user.avsc
 */
package types

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

// Defines a hypothetical stock trade using some known test stock symbols.
type FinanceStockTrade struct {
	// A simulated trade side (buy or sell or short)
	Side string `json:"side"`
	// A simulated random quantity of the trade
	Quantity int32 `json:"quantity"`
	// Simulated stock symbols
	Symbol string `json:"symbol"`
	// A simulated random trade price in pennies
	Price int32 `json:"price"`
	// Simulated accounts assigned to the trade
	Account string `json:"account"`
	// The simulated user who executed the trade
	Userid string `json:"userid"`
}

const FinanceStockTradeAvroCRC64Fingerprint = "'\x99\xff\x1f\xc9\xd0w\xc0"

func NewFinanceStockTrade() FinanceStockTrade {
	r := FinanceStockTrade{}
	return r
}

func DeserializeFinanceStockTrade(r io.Reader) (FinanceStockTrade, error) {
	t := NewFinanceStockTrade()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeFinanceStockTradeFromSchema(r io.Reader, schema string) (FinanceStockTrade, error) {
	t := NewFinanceStockTrade()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeFinanceStockTrade(r FinanceStockTrade, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Side, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.Quantity, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Symbol, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.Price, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Account, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Userid, w)
	if err != nil {
		return err
	}
	return err
}

func (r FinanceStockTrade) Serialize(w io.Writer) error {
	return writeFinanceStockTrade(r, w)
}

func (r FinanceStockTrade) Schema() string {
	return "{\"doc\":\"Defines a hypothetical stock trade using some known test stock symbols.\",\"fields\":[{\"doc\":\"A simulated trade side (buy or sell or short)\",\"name\":\"side\",\"type\":{\"arg.properties\":{\"options\":[\"BUY\",\"SELL\"]},\"type\":\"string\"}},{\"doc\":\"A simulated random quantity of the trade\",\"name\":\"quantity\",\"type\":{\"arg.properties\":{\"range\":{\"max\":5000,\"min\":1}},\"type\":\"int\"}},{\"doc\":\"Simulated stock symbols\",\"name\":\"symbol\",\"type\":{\"arg.properties\":{\"options\":[\"ZBZX\",\"ZJZZT\",\"ZTEST\",\"ZVV\",\"ZVZZT\",\"ZWZZT\",\"ZXZZT\"]},\"type\":\"string\"}},{\"doc\":\"A simulated random trade price in pennies\",\"name\":\"price\",\"type\":{\"arg.properties\":{\"range\":{\"max\":1000,\"min\":5}},\"type\":\"int\"}},{\"doc\":\"Simulated accounts assigned to the trade\",\"name\":\"account\",\"type\":{\"arg.properties\":{\"options\":[\"ABC123\",\"LMN456\",\"XYZ789\"]},\"type\":\"string\"}},{\"doc\":\"The simulated user who executed the trade\",\"name\":\"userid\",\"type\":{\"arg.properties\":{\"regex\":\"User_[1-9]\"},\"type\":\"string\"}}],\"name\":\"finance.FinanceStockTrade\",\"type\":\"record\"}"
}

func (r FinanceStockTrade) SchemaName() string {
	return "finance.FinanceStockTrade"
}

func (_ FinanceStockTrade) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ FinanceStockTrade) SetInt(v int32)       { panic("Unsupported operation") }
func (_ FinanceStockTrade) SetLong(v int64)      { panic("Unsupported operation") }
func (_ FinanceStockTrade) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ FinanceStockTrade) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ FinanceStockTrade) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ FinanceStockTrade) SetString(v string)   { panic("Unsupported operation") }
func (_ FinanceStockTrade) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *FinanceStockTrade) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Side}

		return w

	case 1:
		w := types.Int{Target: &r.Quantity}

		return w

	case 2:
		w := types.String{Target: &r.Symbol}

		return w

	case 3:
		w := types.Int{Target: &r.Price}

		return w

	case 4:
		w := types.String{Target: &r.Account}

		return w

	case 5:
		w := types.String{Target: &r.Userid}

		return w

	}
	panic("Unknown field index")
}

func (r *FinanceStockTrade) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *FinanceStockTrade) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ FinanceStockTrade) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ FinanceStockTrade) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ FinanceStockTrade) HintSize(int)                     { panic("Unsupported operation") }
func (_ FinanceStockTrade) Finalize()                        {}

func (_ FinanceStockTrade) AvroCRC64Fingerprint() []byte {
	return []byte(FinanceStockTradeAvroCRC64Fingerprint)
}

func (r FinanceStockTrade) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["side"], err = json.Marshal(r.Side)
	if err != nil {
		return nil, err
	}
	output["quantity"], err = json.Marshal(r.Quantity)
	if err != nil {
		return nil, err
	}
	output["symbol"], err = json.Marshal(r.Symbol)
	if err != nil {
		return nil, err
	}
	output["price"], err = json.Marshal(r.Price)
	if err != nil {
		return nil, err
	}
	output["account"], err = json.Marshal(r.Account)
	if err != nil {
		return nil, err
	}
	output["userid"], err = json.Marshal(r.Userid)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *FinanceStockTrade) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["side"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Side); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for side")
	}
	val = func() json.RawMessage {
		if v, ok := fields["quantity"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Quantity); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for quantity")
	}
	val = func() json.RawMessage {
		if v, ok := fields["symbol"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Symbol); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for symbol")
	}
	val = func() json.RawMessage {
		if v, ok := fields["price"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Price); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for price")
	}
	val = func() json.RawMessage {
		if v, ok := fields["account"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Account); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for account")
	}
	val = func() json.RawMessage {
		if v, ok := fields["userid"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Userid); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for userid")
	}
	return nil
}
