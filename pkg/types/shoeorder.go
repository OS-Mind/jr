// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCES:
 *     NetDevice.avsc
 *     User.avsc
 *     campaign_finance.avsc
 *     clickstream.avsc
 *     clickstream_codes.avsc
 *     clickstream_users.avsc
 *     credit_cards.avsc
 *     device_information.avsc
 *     fleet_mgmt_description.avsc
 *     fleet_mgmt_location.avsc
 *     fleet_mgmt_sensors.avsc
 *     gaming_games.avsc
 *     gaming_player_activity.avsc
 *     gaming_players.avsc
 *     insurance_customer_activity.avsc
 *     insurance_customers.avsc
 *     insurance_offers.avsc
 *     inventory.avsc
 *     map_dumb_schema.avsc
 *     orders.avsc
 *     pageviews.avsc
 *     payroll_bonus.avsc
 *     payroll_employee.avsc
 *     payroll_employee_location.avsc
 *     pizza_orders.avsc
 *     pizza_orders_cancelled.avsc
 *     pizza_orders_completed.avsc
 *     product.avsc
 *     purchase.avsc
 *     ratings.avsc
 *     shoe.avsc
 *     shoeclickstream.avsc
 *     shoecustomer.avsc
 *     shoeorder.avsc
 *     siem_logs.avsc
 *     stockTrades.avsc
 *     stores.avsc
 *     syslog_logs.avsc
 *     transactions.avsc
 *     users.avsc
 */
package types

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Shoeorder struct {
	Order_id int32 `json:"order_id"`

	Product_id string `json:"product_id"`

	Customer_id string `json:"customer_id"`

	Ts int64 `json:"ts"`
}

const ShoeorderAvroCRC64Fingerprint = "\xfaD&D&\x05\xb8\xae"

func NewShoeorder() Shoeorder {
	r := Shoeorder{}
	return r
}

func DeserializeShoeorder(r io.Reader) (Shoeorder, error) {
	t := NewShoeorder()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeShoeorderFromSchema(r io.Reader, schema string) (Shoeorder, error) {
	t := NewShoeorder()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeShoeorder(r Shoeorder, w io.Writer) error {
	var err error
	err = vm.WriteInt(r.Order_id, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Product_id, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Customer_id, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.Ts, w)
	if err != nil {
		return err
	}
	return err
}

func (r Shoeorder) Serialize(w io.Writer) error {
	return writeShoeorder(r, w)
}

func (r Shoeorder) Schema() string {
	return "{\"fields\":[{\"name\":\"order_id\",\"type\":\"int\"},{\"name\":\"product_id\",\"type\":\"string\"},{\"name\":\"customer_id\",\"type\":\"string\"},{\"name\":\"ts\",\"type\":\"long\"}],\"name\":\"shoes.shoeorder\",\"type\":\"record\"}"
}

func (r Shoeorder) SchemaName() string {
	return "shoes.shoeorder"
}

func (_ Shoeorder) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Shoeorder) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Shoeorder) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Shoeorder) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Shoeorder) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Shoeorder) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Shoeorder) SetString(v string)   { panic("Unsupported operation") }
func (_ Shoeorder) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Shoeorder) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.Int{Target: &r.Order_id}

		return w

	case 1:
		w := types.String{Target: &r.Product_id}

		return w

	case 2:
		w := types.String{Target: &r.Customer_id}

		return w

	case 3:
		w := types.Long{Target: &r.Ts}

		return w

	}
	panic("Unknown field index")
}

func (r *Shoeorder) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Shoeorder) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ Shoeorder) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Shoeorder) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Shoeorder) HintSize(int)                     { panic("Unsupported operation") }
func (_ Shoeorder) Finalize()                        {}

func (_ Shoeorder) AvroCRC64Fingerprint() []byte {
	return []byte(ShoeorderAvroCRC64Fingerprint)
}

func (r Shoeorder) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["order_id"], err = json.Marshal(r.Order_id)
	if err != nil {
		return nil, err
	}
	output["product_id"], err = json.Marshal(r.Product_id)
	if err != nil {
		return nil, err
	}
	output["customer_id"], err = json.Marshal(r.Customer_id)
	if err != nil {
		return nil, err
	}
	output["ts"], err = json.Marshal(r.Ts)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Shoeorder) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["order_id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Order_id); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for order_id")
	}
	val = func() json.RawMessage {
		if v, ok := fields["product_id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Product_id); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for product_id")
	}
	val = func() json.RawMessage {
		if v, ok := fields["customer_id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Customer_id); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for customer_id")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ts"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Ts); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ts")
	}
	return nil
}
